#+TITLE: Unitime
#+AUTHOR: Kodkollektivet
#+EMAIL: jherrlin@gmail.com
#+DATE: <2017-03-10 Fri>
#+STARTUP: content


* New setup
  :PROPERTIES:
  :dir:      /ssh:unitime|sudo:unitime:~/
  :results:  output
  :export:   code
  :date:     <2017-03-09 Thu>
  :END:

  This setup is based on Debian 8, Gunicorn, Django and Nginx.
  To get this Orgmode document to work.
  You need to fix =~/.ssh/config= file with a service called =unitime=.

** Setup environment
*** Generate new SSH keys

    Create a new pair of rsa keys.

    #+BEGIN_SRC sh :dir . :export code
      ssh-keygen -t rsa -C "jherrlin@unitime" -b 4096 -N '' -f ~/.ssh/services/unitime
    #+END_SRC

    Dubbel check that they are there.

    #+BEGIN_SRC sh :dir . :export code
      ls -la ~/.ssh/services | grep unitime
    #+END_SRC

    Copy the public key to the Digital ocean host.

    #+BEGIN_SRC sh :dir . :export code
      cat ~/.ssh/services/unitime.pub
    #+END_SRC

    Edit your =~/.ssh/config= file.

    #+BEGIN_SRC text
      Host unitime
           HostName <IP ADDRESS>
           User <YOUR USERNAME>
           Protocol 2
           IdentityFile ~/.ssh/services/unitime
           StrictHostKeyChecking no
           PubkeyAuthentication yes
           PasswordAuthentication no
    #+END_SRC

    Check to see that it works.

    #+BEGIN_SRC sh :dir . :export code
      ssh -q -oBatchMode=yes unitime exit && if [ $? -eq 0 ]; then echo "Success"; else echo "Failed"; fi
    #+END_SRC


*** Install dependencies
**** Update system

    Update and upgrade the system.

    #+BEGIN_SRC sh
      yes | apt-get update
      yes | apt-get upgrade
    #+END_SRC


**** NTP

     Install =ntpd= time service.

     #+BEGIN_SRC sh
       yes | apt-get install ntp
       systemctl enable ntp
       systemctl start ntp
       systemctl status ntp
     #+END_SRC


     List available timezone and search for Stockholm.

     #+BEGIN_SRC sh
       timedatectl list-timezones | grep Stockholm
     #+END_SRC

     Set timezone.

     #+BEGIN_SRC sh
       timedatectl set-timezone Europe/Stockholm
     #+END_SRC

     Check timezone.

     #+BEGIN_SRC sh
       timedatectl
       date
     #+END_SRC


**** Nginx

    Install Nginx

    #+BEGIN_SRC sh
      yes | apt-get install nginx
      systemctl start nginx
      systemctl enable nginx
      systemctl status nginx
    #+END_SRC

    Prepair an endpoint for the certificates that will be installed in the [[letsencryt]].

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/sites-available/default
      ##
      # You should look at the following URL's in order to grasp a solid understanding
      # of Nginx configuration files in order to fully unleash the power of Nginx.
      # http://wiki.nginx.org/Pitfalls
      # http://wiki.nginx.org/QuickStart
      # http://wiki.nginx.org/Configuration
      #
      # Generally, you will want to move this file somewhere, and start with a clean
      # file but keep this around for reference. Or just disable in sites-enabled.
      #
      # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
      ##

      # Default server configuration
      #

      server {
              listen 80 default_server;
              listen [::]:80 default_server;

              # SSL configuration
              #
              # listen 443 ssl default_server;
              # listen [::]:443 ssl default_server;
              #
              # Self signed certs generated by the ssl-cert package
              # Don't use them in a production server!
              #
              # include snippets/snakeoil.conf;

              root /var/www/html;

              # Add index.php to the list if you are using PHP
              index index.html index.htm index.nginx-debian.html;



              server_name _;

              location / {
                      # First attempt to serve request as file, then
                      # as directory, then fall back to displaying a 404.
                      try_files $uri $uri/ =404;
              }

              # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
              #
              #location ~ \.php$ {
              #       include snippets/fastcgi-php.conf;
              #
              #       # With php5-cgi alone:
              #       fastcgi_pass 127.0.0.1:9000;
              #       # With php5-fpm:
              #       fastcgi_pass unix:/var/run/php5-fpm.sock;
              #}

              # deny access to .htaccess files, if Apache's document root
              # concurs with nginx's one
              #
              #location ~ /\.ht {
              #       deny all;
              #}
              location ~ /.well-known {
                      allow all;
              }
      }


      # Virtual Host configuration for example.com
      #
      # You can move that to a different file under sites-available/ and symlink that
      # to sites-enabled/ to enable it.
      #
      #server {
      #       listen 80;
      #       listen [::]:80;
      #
      #       server_name example.com;
      #
      #       root /var/www/example.com;
      #       index index.html;
      #
      #       location / {
      #               try_files $uri $uri/ =404;
      #       }
      #}
    #+END_SRC

    Restart Nginx

    #+BEGIN_SRC sh
      systemctl restart nginx
      systemctl status nginx
    #+END_SRC


**** Python related

     #+BEGIN_SRC sh
       yes | apt-get install python3-pip
       pip3 install --upgrade pip
       pip3 install virtualenv
     #+END_SRC


**** Letsencrypt

    - https://letsencrypt.org/
    - [[https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-debian-8][DO Guide]]

    Add the backports repository

    #+BEGIN_SRC sh
      echo 'deb http://ftp.debian.org/debian jessie-backports main' | tee /etc/apt/sources.list.d/backports.list
    #+END_SRC

    Update the repo

    #+BEGIN_SRC sh
      apt-get update
    #+END_SRC

    Install =certbot=

    #+BEGIN_SRC sh
      yes | apt-get install certbot -t jessie-backports
    #+END_SRC

    Before proceeding with the next steps. Fix your DNS records accordingly!


    Create config dir, [[http://letsencrypt.readthedocs.io/en/latest/using.html][source]]

    #+BEGIN_SRC sh
      mkdir -p /etc/letsencrypt
      touch /etc/letsencrypt/cli.ini
      ls -la /etc/letsencrypt
    #+END_SRC

    Append the following to =/etc/letsencrypt/cli.ini=.
    [[http://letsencrypt.readthedocs.io/en/latest/using.html#id20][source]]

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/letsencrypt/cli.ini
      # This is an example of the kind of things you can do in a configuration file.
      # All flags used by the client can be configured here. Run Certbot with
      # "--help" to learn more about the available options.

      # Use a 4096 bit RSA key instead of 2048
      rsa-key-size = 4096

      # Uncomment and update to register with the specified e-mail address
      email = jherrlin@gmail.com

      # Uncomment and update to generate certificates for the specified
      # domains.
      domains = unitime.se, www.unitime.se, api.unitime.se, dev.unitime.se, prod.unitime.se

      # Uncomment to use a text interface instead of ncurses
      text = True

      # Uncomment to use the standalone authenticator on port 443
      # authenticator = standalone
      # standalone-supported-challenges = tls-sni-01

      # Uncomment to use the webroot authenticator. Replace webroot-path with the
      # path to the public_html / webroot folder being served by your web server.
      authenticator = webroot
      webroot-path = /var/www/html

      agree-tos = True
    #+END_SRC

    Verify the settings in =cli.ini=.

    #+BEGIN_SRC sh
      cat /etc/letsencrypt/cli.ini
    #+END_SRC

    Generate the certificates.

    #+BEGIN_SRC sh
      certbot certonly
    #+END_SRC

    Check that your certificates are there.

    #+BEGIN_SRC sh
      sudo ls -l /etc/letsencrypt/live/unitime.se
    #+END_SRC

    Generate Strong Diffie-Hellman Group with 2048-bits.

    #+BEGIN_SRC sh
      sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
    #+END_SRC

    Dubbel check that the file is there

    #+BEGIN_SRC sh
      ls -l /etc/ssl/certs/ | grep dhparam.pem
    #+END_SRC

    /etc/nginx/snippets/ssl-unitime.se.conf

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/snippets/ssl-unitime.se.conf
      ssl_certificate /etc/letsencrypt/live/unitime.se/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/unitime.se/privkey.pem;
    #+END_SRC

    Make sure that its there.

    #+BEGIN_SRC sh
      cat /etc/nginx/snippets/ssl-unitime.se.conf
    #+END_SRC

    https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/snippets/ssl-params.conf
      # from https://cipherli.st/
      # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html

      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_prefer_server_ciphers on;
      ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
      ssl_ecdh_curve secp384r1;
      ssl_session_cache shared:SSL:10m;
      ssl_session_tickets off;
      ssl_stapling on;
      ssl_stapling_verify on;
      resolver 8.8.8.8 8.8.4.4 valid=300s;
      resolver_timeout 5s;
      # Disable preloading HSTS for now.  You can use the commented out header line that includes
      # the "preload" directive if you understand the implications.
      #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
      add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;

      ssl_dhparam /etc/ssl/certs/dhparam.pem;
    #+END_SRC

    Make sure everything is correct.

    #+BEGIN_SRC sh
      cat /etc/nginx/snippets/ssl-params.conf
    #+END_SRC

    Copy the default file and rename the existing.

    #+BEGIN_SRC sh
      cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
      mv /etc/nginx/sites-available/default /etc/nginx/sites-available/unitime
      ls -l /etc/nginx/sites-available
    #+END_SRC

    Nginx config for unitime.se

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/sites-available/unitime
      server {
          listen 80 default_server;
          listen [::]:80 default_server;
          server_name unitime.se www.unitime.se api.unitime.se;
          return 301 https://$server_name$request_uri;
      }

      server {
          listen 443 ssl;

          server_name unitime.se www.unitime.se api.unitime.se;

          ssl_certificate /etc/letsencrypt/live/unitime.se/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/unitime.se/privkey.pem;

          ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
          ssl_prefer_server_ciphers on;
          ssl_dhparam /etc/ssl/certs/dhparam.pem;
          ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
          ssl_session_timeout 1d;
          ssl_session_cache shared:SSL:50m;
          ssl_stapling on;
          ssl_stapling_verify on;
          add_header Strict-Transport-Security max-age=15768000;

          location ~ /.well-known {
                  allow all;
          }

          # The rest of your server block
          # root /usr/share/nginx/html;
          # index index.html index.htm;
          location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_pass http://unix:/webapps/unitime/unitime.sock;
          }

          location /static/ {
              root /webapps/unitime;
              autoindex off;
          }
      }
    #+END_SRC

    Make sure that is there

    #+BEGIN_SRC sh
      ls -l /etc/nginx/sites-available/unitime
      cat /etc/nginx/sites-available/unitime
    #+END_SRC

    Remove the old symbolic link to =default=.
    Create symbolic link from =sites-available= to =sites-enabled=

    #+BEGIN_SRC sh
      rm /etc/nginx/sites-enabled/default
      ln -s /etc/nginx/sites-available/unitime /etc/nginx/sites-enabled/unitime
      ls -l /etc/nginx/sites-enabled
    #+END_SRC


**** Git

     Install =git=

     #+BEGIN_SRC sh
       yes | apt-get install git
     #+END_SRC


**** Root's bin

     Create a *bin/* folder for the =root= user.

     #+BEGIN_SRC sh
       mkdir -p /root/bin
     #+END_SRC


*** Add webapp user

    Create a *webapp* user.

    This account is only used for the Django related services.
    The account cant login and don't have a shell and no home folder.

    #+BEGIN_SRC sh
      useradd -M -s /sbin/nologin -c "Webapp user and group, used for webapps" webapp
    #+END_SRC

    Verify that the user and group is added.

    #+BEGIN_SRC sh
      cat /etc/passwd
      cat /etc/group
    #+END_SRC


*** SSHd settings

    Update =sshd_config= to secure the server

    #+BEGIN_SRC sh
      sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    #+END_SRC


    Restard sshd

    #+BEGIN_SRC sh
      systemctl restart sshd
    #+END_SRC


*** Initialize Unitime app

    Write the script to =/root/bin/initialize_unitime_app.sh=.

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/initialize_unitime_app.sh
      mkdir -p /webapps/unitime && cd $_
      git clone https://github.com/Kodkollektivet/unitime-api.git .
      virtualenv venv
      source venv/bin/activate
      pip install -r requirements.txt
      cd unitime
      mkdir -p /webapps/unitime/logs
      sed -i 's/DEBUG = True/DEBUG = False/' /webapps/unitime/unitime/settings/settings.py
      python manage.py makemigrations
      python manage.py migrate
      python manage.py collectstatic --noinput
      cd /webapps
      chown -R webapp:webapp unitime
    #+END_SRC

    Execute the script

    #+BEGIN_SRC sh
      bash /root/bin/initialize_unitime_app.sh
    #+END_SRC


*** Create a systemd file

    First test out the the application is working manually!

    #+BEGIN_SRC sh
      cd /webapps/unitime/unitime
      /webapps/unitime/venv/bin/gunicorn  --bind 0.0.0.0:8000 settings.wsgi:application
    #+END_SRC

    If everything working as expected, create a service for it.

    Create the =/etc/systemd/system/unitime.service= file and append the following.

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/unitime.service
      [Unit]
      Description=Unitime daemon
      After=network.target

      [Service]
      User=webapp
      Group=webapp
      WorkingDirectory=/webapps/unitime/unitime
      ExecStart=/webapps/unitime/venv/bin/gunicorn --workers 10 --bind unix:/webapps/unitime/unitime.sock settings.wsgi:application

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    Make sure that its there

    #+BEGIN_SRC sh
      cat /etc/systemd/system/unitime.service
    #+END_SRC

    Enable and start the service

    #+BEGIN_SRC sh
      sudo systemctl daemon-reload
      sudo systemctl start unitime
      sudo systemctl enable unitime
      sudo systemctl restart nginx
      sudo systemctl status unitime
    #+END_SRC


*** Initialize the scrapper app
**** Set up the scripts

     Create a script for downloading and prepair the environment for the unitime-scrapper.
     This app will live in =/webapps/unitime-scrapper/=.

     The scrapper can be found on GitHub, [[https://github.com/jherrlin/unitime-code-scrapper][here]].

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/initialize_scrapper_app.sh
       # This script will install and prepair the environment for
       # the scrapper app
       mkdir -p /webapps/unitime-scrapper && cd $_
       git clone https://github.com/jherrlin/unitime-code-scrapper.git .
       virtualenv venv
       source venv/bin/activate
       pip install -r requirements.txt
       chown -R webapp:webapp /webapps/unitime-scrapper
     #+END_SRC

     Execute the script.

     #+BEGIN_SRC sh
       bash /root/bin/initialize_scrapper_app.sh
     #+END_SRC

     Create a scrapper script.
     This is the script that the [[scrapperservice]] will execute.
     There is a [[scrappersertimer]] that will be run on a schedule.

     TODO: Dubbel check the code sorter.

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/scrapper_runner.sh
       cd /webapps/unitime-scrapper
       source venv/bin/activate
       python scrapper.py
       cat codes.txt uscodes.txt | awk '/^......+/{ print toupper($0) }' | sort | uniq > dump.txt
       cp dump.txt uscodes.txt
       mv uscodes.txt codes.txt
       deactivate
     #+END_SRC


**** Create systemd timers

     /etc/systemd/system/scrapper.service
     <<scrapperservice>>

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/scrapper.service
       [Unit]
       Description=Unitime scrapper service

       [Service]
       Nice=19
       IOSchedulingClass=3
       ExecStart=/bin/bash /root/bin/scrapper_runner.sh
     #+END_SRC

     /etc/systemd/system/scrapper.timer
     <<scrappersertimer>>

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/scrapper.timer
       [Unit]
       Description=Weekly unitime scrapper timer

       [Timer]
       OnCalendar=Sun *-*-* 00:15:00
       Persistent=true
       Unit=scrapper.service

       [Install]
       WantedBy=timers.target
     #+END_SRC

     Reload, enable and list timers

     #+BEGIN_SRC sh
       systemctl daemon-reload
       systemctl enable scrapper.service
       systemctl enable scrapper.timer
       systemctl list-timers --all
       systemctl status scrapper.{timer,service}
     #+END_SRC

     Follow the logs.

     #+BEGIN_SRC sh
       journalctl -f -u scrapper.service
     #+END_SRC

     To start the service manually, follow the logs then.

     #+BEGIN_SRC sh
       systemctl start scrapper.service
     #+END_SRC

*** Postgres

    TODO

*** Firewall

    TODO

** Update Unitime Django app

   Updates the Django project. Set the right permissions
   and restart the services.

   #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/update_unitime_app.sh
     cd /webapps/unitime
     git pull
     rm -rf venv
     virtualenv venv
     source venv/bin/activate
     pip install -r requirements.txt
     cd unitime
     pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U
     python manage.py makemigrations
     python manage.py migrate
     python manage.py collectstatic --noinput
     sed -i 's/DEBUG = True/DEBUG = False/' /webapps/unitime/unitime/settings/settings.py
     cd /webapps
     chown -R webapp:webapp unitime
     systemctl restart unitime
     systemctl restart nginx
     systemctl status unitime
     systemctl status nginx
   #+END_SRC

   Run the script

   #+BEGIN_SRC sh
     bash /root/bin/update_unitime_app.sh
   #+END_SRC
