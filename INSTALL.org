#+AUTHOR: John Herrlin
#+EMAIL: jherrlin@gmail.com
#+DATE: <2016-12-30 Fri>
#+STARTUP: content


* Unitime server
  :PROPERTIES:
  :dir:      /ssh:unitime|sudo:unitime:~/
  :results:  output
  :export:   code
  :date:     <2017-03-14 Tue>
  :END:
** Intro

  The setup is based on Debian 8, Gunicorn, Django, Systemd, Postgres and Nginx.

  There is also a CI service that will listen to webhooks from Travis and update the
  application.

  The document is written in a way that you could follow from the top to the bottom and
  copy and paste the commands.

  But the most efficient way is to use Emacs Orgmode. All of the =sh= code blocks can be
  used executed remotely with =Babel= and all the =text= blocks can be put on the remote
  server using =tangle=.


** Prepare client

   Create a new pair of rsa keys.

   #+BEGIN_SRC sh :dir . :export code
     ssh-keygen -t rsa -C "email@unitime" -b 4096 -N '' -f ~/.ssh/services/unitime
   #+END_SRC

   Dubbel check that they are there.

   #+BEGIN_SRC sh :dir . :export code
     ls -la ~/.ssh/services | grep unitime
   #+END_SRC

   Copy the public key to the Digital ocean host.

   #+BEGIN_SRC sh :dir . :export code
     cat ~/.ssh/services/unitime.pub
   #+END_SRC

   Edit your =~/.ssh/config= file.

   #+BEGIN_SRC text
     Host unitime
          HostName <IP ADDRESS>
          User <YOUR USERNAME>
          Protocol 2
          IdentityFile ~/.ssh/services/unitime
          StrictHostKeyChecking no
          PubkeyAuthentication yes
          PasswordAuthentication no
   #+END_SRC

   Check to see that it works.

   #+BEGIN_SRC sh :dir . :export code
     ssh -q -oBatchMode=yes unitime exit && if [ $? -eq 0 ]; then echo "Success"; else echo "Failed"; fi
   #+END_SRC


** Update system

  Update and upgrade the system.

  #+BEGIN_SRC sh
    yes | apt-get update
    yes | apt-get upgrade
  #+END_SRC


** Root's bin

   Create a *bin/* folder for the =root= user.
   This folder will later on contain all of the scripts.

   #+BEGIN_SRC sh
     mkdir -p /root/bin
   #+END_SRC


** Install dependencies

   This script will install all of the dependencies needed for our environment to run.

   Located: /root/bin/install_dependencies.sh

   #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/install_dependencies.sh
     yes | apt-get update
     yes | apt-get upgrade
     echo 'deb http://ftp.debian.org/debian jessie-backports main' | tee /etc/apt/sources.list.d/backports.list
     yes | apt-get update
     yes | apt-get install certbot -t jessie-backports
     yes | apt-get install postgresql-9.4 postgresql-client-9.4
     yes | apt-get install git
     yes | apt-get install ntp
     yes | apt-get install python3-pip
     yes | apt-get install nginx
     pip3 install --upgrade pip
     pip3 install virtualenv
   #+END_SRC

   Run the script.

   #+BEGIN_SRC sh
     bash /root/bin/install_dependencies.sh
   #+END_SRC

** NTP

   Configure =ntpd= time service.

   #+BEGIN_SRC sh
     systemctl enable ntp
     systemctl start ntp
     systemctl status ntp
   #+END_SRC

   List available timezone and search for Stockholm.

   #+BEGIN_SRC sh
     timedatectl list-timezones | grep Stockholm
   #+END_SRC

   Set timezone.

   #+BEGIN_SRC sh
     timedatectl set-timezone Europe/Stockholm
   #+END_SRC

   Check timezone.

   #+BEGIN_SRC sh
     timedatectl
     date
   #+END_SRC


** SSH settings

   Update =sshd_config= to secure the server. Dont allow password authentication.

   #+BEGIN_SRC sh
     sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
   #+END_SRC

   Restard sshd

   #+BEGIN_SRC sh
     systemctl restart sshd
   #+END_SRC


** Firewall

   For firewall I am using the Netfilter kernel module.
   This is accessed with =iptables=.

*** Resources

    - https://www.digitalocean.com/community/tutorials/how-to-set-up-a-basic-iptables-firewall-on-centos-6
    - https://www.digitalocean.com/community/tutorials/how-to-use-psad-to-detect-network-intrusion-attempts-on-an-ubuntu-vps
    - https://www.upcloud.com/support/configuring-iptables-on-debian-8-0/
    - https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-debian-8
    - https://github.com/jherrlin/LNU-1DV720-Server-Administration/blob/master/iptables_example.sh

*** Script

    Iptables rules.

    Located in: /root/bin/start_iptables_script.sh

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/start_iptables_script.sh
      #!/bin/bash
      # Iptables script to secure the server.
      # This scipt is loaded at boot.
      echo "Starting the script..."
      iptables -A INPUT -i lo -j ACCEPT
      iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
      iptables -A INPUT -p tcp --dport 22 -j ACCEPT
      iptables -A INPUT -p tcp --dport 80 -j ACCEPT
      iptables -A INPUT -p tcp --dport 443 -j ACCEPT
      iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
      iptables -A INPUT -j DROP
      iptables -A FORWARD -j DROP
      echo "Script done!"
    #+END_SRC

*** Systemd

    A timer is used to run the =iptables_script.sh= script on every boot. The timer is
    connected to a service that will handle the execution of the script. The timer is set
    to run 2 min after boot. In my opinion this is good in somethings wrong with the
    rules and you happen to write rules that locks you out of the system.

**** Service

     Located: /etc/systemd/system/start_iptables.service

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/start_iptables.service
       [Unit]
       Description=Iptables service

       [Service]
       Nice=19
       IOSchedulingClass=3
       ExecStart=/bin/bash /root/bin/start_iptables_script.sh
     #+END_SRC

**** Timer

     https://www.freedesktop.org/software/systemd/man/systemd.timer.html

     Located: /etc/systemd/system/start_iptables.timer

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/start_iptables.timer
       [Unit]
       Description=Run 2 min after boot
       Unit=start_iptables.service

       [Timer]
       OnBootSec=2min

       [Install]
       WantedBy=timers.target
     #+END_SRC

**** Enable and start

     Reload timer's and enable the =start_iptables=

     #+BEGIN_SRC sh
       systemctl daemon-reload
       systemctl enable start_iptables.{timer,service}
       systemctl list-timers --all
     #+END_SRC


**** Useful

     If restarting the server.
     Look when the script load's the rules

     #+BEGIN_SRC sh
       watch -n 1 iptables -L
     #+END_SRC

     Look at the logs

     #+BEGIN_SRC sh
       journalctl -f -u start_iptables.service
     #+END_SRC

*** Useful

    List rules

    #+BEGIN_SRC sh
      iptables -v -t filter -L --line-numbers
    #+END_SRC

    Flush (delete) rules

    #+BEGIN_SRC sh
      iptables -F
    #+END_SRC

** Nginx and Let's Encrypt
*** Initial nginx config

    Enable and start Nginx.

    #+BEGIN_SRC sh
      systemctl start nginx
      systemctl enable nginx
      systemctl status nginx
    #+END_SRC

    Prepare an endpoint for the certificates that will be installed. This is needed to
    verify the host against the DNS records. So if you have not done it yet, now is the
    time to jump over to you DNS provider and set up the correct records for your service.

    Copy the original *default* config file.

    #+BEGIN_SRC sh
      mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
    #+END_SRC

    Replace *default* with a configuration that answers on all requests. This will be used
    to verify our domains with Lets Encrypt's =certbot=.

    Located: /etc/nginx/sites-available/default

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/sites-available/default
      server {
              listen 80 default_server;
              listen [::]:80 default_server;

              root /var/www/html;

              index index.html index.htm index.nginx-debian.html;

              server_name _;

              location / {
                      # First attempt to serve request as file, then
                      # as directory, then fall back to displaying a 404.
                      try_files $uri $uri/ =404;
              }

              location ~ /.well-known {
                      allow all;
              }
      }
    #+END_SRC

    Verify the config for syntax errors.

    #+BEGIN_SRC sh
      nginx -t
    #+END_SRC

    Restart =nginx=.

    #+BEGIN_SRC sh
      systemctl restart nginx
    #+END_SRC


*** Let's Encrypt

    Before proceeding with the next steps, are you DNS records correct?!

    Create config dir, [[http://letsencrypt.readthedocs.io/en/latest/using.html][source]]

    #+BEGIN_SRC sh
      mkdir -p /etc/letsencrypt
      touch /etc/letsencrypt/cli.ini
      ls -la /etc/letsencrypt
    #+END_SRC

    Append the following to =/etc/letsencrypt/cli.ini=. [[http://letsencrypt.readthedocs.io/en/latest/using.html#id20][source]]

    Located: /etc/letsencrypt/cli.ini

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/letsencrypt/cli.ini
      # This is an example of the kind of things you can do in a configuration file.
      # All flags used by the client can be configured here. Run Certbot with
      # "--help" to learn more about the available options.

      # Use a 4096 bit RSA key instead of 2048
      rsa-key-size = 4096

      # Uncomment and update to register with the specified e-mail address
      email = jherrlin@gmail.com

      # Uncomment and update to generate certificates for the specified
      # domains.
      domains = unitime.se, www.unitime.se, api.unitime.se, dev.unitime.se, prod.unitime.se, ci.unitime.se

      # Uncomment to use a text interface instead of ncurses
      text = True

      # Uncomment to use the standalone authenticator on port 443
      # authenticator = standalone
      # standalone-supported-challenges = tls-sni-01

      # Uncomment to use the webroot authenticator. Replace webroot-path with the
      # path to the public_html / webroot folder being served by your web server.
      authenticator = webroot
      webroot-path = /var/www/html

      agree-tos = True
    #+END_SRC

    Check that your certificates are there.

    #+BEGIN_SRC sh
      sudo ls -l /etc/letsencrypt/live/unitime.se
    #+END_SRC

    Generate Strong Diffie-Hellman Group with 2048-bits.

    #+BEGIN_SRC sh
      sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
    #+END_SRC

    Verify that the file is there.

    #+BEGIN_SRC sh
      ls -l /etc/ssl/certs/ | grep dhparam.pem
    #+END_SRC

    Generate the certificates.

    #+BEGIN_SRC sh
      certbot certonly
    #+END_SRC

    Remove the default nginx server block.

    #+BEGIN_SRC sh
      rm /etc/nginx/sites-enabled/default
    #+END_SRC


*** Nginx snippets

    Located: /etc/nginx/snippets/ssl-unitime.se.conf

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/snippets/ssl-unitime.se.conf
      ssl_certificate /etc/letsencrypt/live/unitime.se/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/unitime.se/privkey.pem;
    #+END_SRC

    Located: /etc/nginx/snippets/ssl-params.conf

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/snippets/ssl-params.conf
      # from https://cipherli.st/
      # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html

      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_prefer_server_ciphers on;
      ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
      ssl_ecdh_curve secp384r1;
      ssl_session_cache shared:SSL:10m;
      ssl_session_tickets off;
      ssl_stapling on;
      ssl_stapling_verify on;
      resolver 8.8.8.8 8.8.4.4 valid=300s;
      resolver_timeout 5s;
      # Disable preloading HSTS for now.  You can use the commented out header line that includes
      # the "preload" directive if you understand the implications.
      #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
      add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;

      ssl_dhparam /etc/ssl/certs/dhparam.pem;
    #+END_SRC

    Create *well-known* snippet.

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/snippets/well-known.conf
      location ~ /.well-known {
              allow all;
      }
    #+END_SRC


** Webapp user

   Create a *webapp* user.

   This account is only used for the Django related services.
   The account cant login and don't have a shell and no home folder.

   #+BEGIN_SRC sh
     useradd -M -s /usr/sbin/nologin -c "Webapp user and group, used for webapps" webapp
   #+END_SRC

   Verify that the user and group is added.

   #+BEGIN_SRC sh
     cat /etc/passwd
     cat /etc/group
   #+END_SRC


** Unitime Django app
*** Initialize

    Located: /root/bin/initialize_unitime_app.sh

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/initialize_unitime_app.sh
      #!/bin/bash
      mkdir -p /webapps/unitime && cd $_
      git clone https://github.com/Kodkollektivet/unitime-api.git .
      virtualenv venv
      source venv/bin/activate
      pip install -r requirements_prod.txt
      cd unitime
      mkdir -p /webapps/unitime/logs
      python manage.py makemigrations
      python manage.py migrate
      python manage.py collectstatic --noinput
      cd /webapps
      chown -R webapp:webapp unitime
    #+END_SRC

    Execute the script

    #+BEGIN_SRC sh
      bash /root/bin/initialize_unitime_app.sh
    #+END_SRC


*** Nginx

    Nginx config for Unitime Django app.

    Located: /etc/nginx/sites-available/unitime

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/nginx/sites-available/unitime
      server {
          listen 80      default_server;
          listen [::]:80 default_server;
          server_name    unitime.se www.unitime.se api.unitime.se;
          return 301     https://$server_name$request_uri;
      }

      server {
          listen 443 ssl;

          server_name unitime.se www.unitime.se api.unitime.se;

          include snippets/ssl-unitime.se.conf;
          include snippets/ssl-params.conf;
          include snippets/well-known.conf;

          # The rest of your server block
          # root /usr/share/nginx/html;
          # index index.html index.htm;
          location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_pass http://unix:/webapps/unitime/unitime.sock;
          }

          location /static/ {
              root /webapps/unitime;
              autoindex off;
          }
      }
    #+END_SRC

    Enable the server block

    #+BEGIN_SRC sh
      ln -s /etc/nginx/sites-available/unitime /etc/nginx/sites-enabled/unitime
      ls -l /etc/nginx/sites-enabled
    #+END_SRC

    Restart =nginx=.

    #+BEGIN_SRC sh
      systemctl restart nginx
    #+END_SRC


*** Systemd
**** Service

     Located: /etc/systemd/system/unitime.service

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/unitime.service
       [Unit]
       Description=Unitime daemon
       After=network.target

       [Service]
       User=webapp
       Group=webapp
       Restart=on-failure
       RestartSec=5
       WorkingDirectory=/webapps/unitime/unitime
       ExecStart=/webapps/unitime/venv/bin/gunicorn --workers 10 --bind unix:/webapps/unitime/unitime.sock settings.wsgi:application

       [Install]
       WantedBy=multi-user.target
     #+END_SRC


**** Enable and start

     Enable and start the service

     #+BEGIN_SRC sh
       sudo systemctl daemon-reload
       sudo systemctl start unitime
       sudo systemctl enable unitime
       sudo systemctl restart nginx
       sudo systemctl status unitime
     #+END_SRC


**** Useful

     Manually test if the application is working.

     #+BEGIN_SRC sh
       cd /webapps/unitime/unitime
       /webapps/unitime/venv/bin/gunicorn --bind 0.0.0.0:8000 settings.wsgi:application
     #+END_SRC


*** Create superuser

    This can only be done after Postgres have been set up correct.
    Need to be done manually in a shell on the server.

    #+BEGIN_SRC sh
      cd /webapps/unitime
      source venv/bin/activate
      cd unitime
      python manage.py createsuperuser --settings settings.production
    #+END_SRC


*** Postgres
**** Initialize

     Script for initializing the db.

     This script is doing a little more than it should. When a new user and password is
     generated for our Unitime app and applied to Postgres its also makes sense to create a
     =production.py= file that contains the same credentials.


     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/initialize_postgres.sh
       #!/bin/bash
       # Don't save commands in bash history (only for current session)
       unset HISTFILE
       # Generate username and password
       PG_USER=$(tr -cd '[:lower:]' < /dev/urandom | fold -w10 | head -n1)
       PG_PASS=$(tr -cd '[:lower:]' < /dev/urandom | fold -w20 | head -n1)
       DB_NAME=unitime

       # Generate secret key for Unitime.
       UNITIME_SECRET_KEY=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1)

       echo $PG_USER
       echo $PG_PASS
       echo $UNITIME_SECRET_KEY

       # Create user and database
       #echo "CREATE USER $PG_USER WITH PASSWORD '$PG_PASS';" | sudo -u postgres psql
       #echo "CREATE DATABASE $DB_NAME;" | sudo -u postgres psql
       #echo "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $PG_USER;" | sudo -u postgres psql
       #export PGUSER=postgres
       sudo -u postgres psql << EOF
       CREATE USER $PG_USER WITH PASSWORD '$PG_PASS';
       CREATE DATABASE $DB_NAME;
       GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $PG_USER;
       EOF

       # Create Unitime production settings
       touch /webapps/unitime/unitime/settings/production.py

       # Write related data to it.
       cat << EOF > /webapps/unitime/unitime/settings/production.py
       # Unitime production settings file.
       # Generated by the script in: /root/bin/initialize_postgres.sh
       from .settings import *

       DEBUG = False

       ALLOWED_HOSTS = ['*']

       SECRET_KEY = '$UNITIME_SECRET_KEY'

       DATABASES = {
           'default': {
               'ENGINE': 'django.db.backends.postgresql_psycopg2',
               'NAME': '$DB_NAME',
               'USER': '$PG_USER',
               'PASSWORD': '$PG_PASS',
               'HOST': 'localhost',
               'PORT': '5432',
           }
       }
       EOF

       cat /webapps/unitime/unitime/settings/production.py

       # Change wsgi to production
       sed -i.bak 's@settings.settings@settings.production@' /webapps/unitime/unitime/settings/wsgi.py
       cd /webapps/unitime
       source venv/bin/activate
       cd unitime
       find . -type f -name "*.pyc" -exec rm -rf "{}" \;
       python manage.py makemigrations
       python manage.py migrate --settings settings.production
       python manage.py collectstatic --noinput
       cd /webapps
       chown -R webapp:webapp unitime
       systemctl daemon-reload
       systemctl restart unitime
       systemctl restart nginx
       systemctl status unitime
       systemctl status nginx
     #+END_SRC

     Generate a password for the database

     #+BEGIN_SRC sh
       bash /root/bin/initialize_postgres.sh
     #+END_SRC

     Restart the Unitime service

     #+BEGIN_SRC sh
       systemctl restart unitime
       systemctl status unitime
     #+END_SRC

**** Manual management

     #+BEGIN_SRC sh
       sudo -u postgres psql
     #+END_SRC

     | \l                      | List databases  |
     | \du                     | List users      |
     | DROP DATABASE <db name> | Remove database |
     | DROP USER <user name>   | Remove user     |
     | \help                   | Get help        |
     | \c <db name>            | Connect to db   |
     | \dt                     | List summary    |

**** Remove database and user

     Remove the database and the user.
     *WARNING!* This wil destroy the database!

     #+BEGIN_SRC sh
       systemctl stop unitime.service
       sudo -u postgres psql << EOF
       DRPP DATABASE unitime;
       DROP USER $(sed -n "s@\s\{8\}'USER': '\(.\{10\}\)',@\1@p" /webapps/unitime/unitime/settings/production.py);
       EOF
     #+END_SRC

*** Update Unitime app

    Updates the Django project. Set the right permissions and restart the services.

    Located: /root/bin/update_unitime_app.sh

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/update_unitime_app.sh
      #!/bin/bash
      echo "Start updating unitime app."
      systemctl stop unitime
      systemctl stop nginx
      cd /webapps/unitime
      find unitime/ -type f -name "*.pyc" -exec rm -f "{}" \;
      git pull
      source venv/bin/activate
      pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U 2>&1 > /dev/null
      python manage.py makemigrations
      python manage.py migrate --settings settings.production
      python manage.py collectstatic --noinput
      cd /webapps
      chown -R webapp:webapp unitime
      systemctl daemon-reload
      systemctl start unitime
      systemctl start nginx
      echo "Update done."
    #+END_SRC

    Run the script

    #+BEGIN_SRC sh
      bash /root/bin/update_unitime_app.sh
    #+END_SRC


** Scrapper

   The scrapper is an application that is scrapping different resoueces to look for
   course codes. Those codes are then pushed through the Rest API and the API application
   will look for them. The source code can be found on GitHub [[https://github.com/jherrlin/unitime-code-scrapper][here]].

*** Initialize

    Create a script for downloading and prepair the environment for the unitime-scrapper.
    This app will live in =/webapps/unitime-scrapper/=.

    Located: /root/bin/initialize_scrapper_app.sh

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/initialize_scrapper_app.sh
      #!/bin/bash
      # This script will install and prepair the environment for
      # the scrapper app
      mkdir -p /webapps/unitime-scrapper && cd $_
      touch uscodes.txt
      git clone https://github.com/jherrlin/unitime-code-scrapper.git .
      sed -i 's@https://api.kodkollektivet.se/unitime@https://unitime.se/api@' scrapper.py
      virtualenv venv
      source venv/bin/activate
      pip install -r requirements.txt
      chown -R webapp:webapp /webapps/unitime-scrapper
    #+END_SRC

    Execute the script.

    #+BEGIN_SRC sh
      bash /root/bin/initialize_scrapper_app.sh
    #+END_SRC


*** Script

    Create a scrapper script. This is the script that the [[scrapperservice][scrapper service]] will execute.
    There is a [[scrappertimer][scrapper timer]] that will be run on a schedule.

    Located: /root/bin/start_scrapper.sh

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/start_scrapper.sh
      #!/bin/bash
      cd /webapps/unitime-scrapper
      source venv/bin/activate
      python scrapper.py
      cat codes.txt uscodes.txt | sed -e 's@^\(.\{6\}\).*@\U\1@' | sort | uniq > dump.txt
      mv -f dump.txt uscodes.txt
      echo > codes.txt
      deactivate
    #+END_SRC


*** Systemd
**** Service
     <<scrapperservice>>

     Located: /etc/systemd/system/scrapper.service

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/scrapper.service
       [Unit]
       Description=Unitime scrapper service

       [Service]
       Nice=19
       IOSchedulingClass=3
       ExecStart=/bin/bash /root/bin/start_scrapper.sh
     #+END_SRC


**** Timer
     <<scrappertimer>>

     Located: /etc/systemd/system/scrapper.timer

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/scrapper.timer
       [Unit]
       Description=Weekly unitime scrapper timer

       [Timer]
       OnCalendar=Sun *-*-* 00:15:00
       Persistent=true
       Unit=scrapper.service

       [Install]
       WantedBy=timers.target
     #+END_SRC

**** Enable and start

     Reload, enable and list timers

     #+BEGIN_SRC sh
       systemctl daemon-reload
       systemctl enable scrapper.{timer,service}
       systemctl list-timers --all
       systemctl status scrapper.{timer,service}
     #+END_SRC


**** Useful

     Follow the logs.

     #+BEGIN_SRC sh
       journalctl -f -u scrapper.service
     #+END_SRC

     To start the service manually, follow the logs then.

     #+BEGIN_SRC sh
       systemctl start scrapper.service
     #+END_SRC
** CI

   Continuous integration workflow.

*** Install

    Installs unitime-ci, [[https://github.com/jherrlin/unitime-ci][source]].

    Located: /root/bin/initialize_ci_app.sh

    #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/root/bin/initialize_ci_app.sh
      #!/bin/bash
      mkdir -p /webapps/ci && cd $_
      git clone https://github.com/jherrlin/unitime-ci.git .
      URL=$(tr -cd '[:lower:]' < /dev/urandom | fold -w20 | head -n1)
      sed -i 's@my_super_secret_url@'$URL'@' deploy.py
      sed -i "s@BASE_DIR + '/scripts/deploy.sh'@'/root/bin/update_unitime_app.sh'@" deploy.py
      virtualenv venv
      source venv/bin/activate
      pip install -r requirements.txt
      chown -R root:root /webapps/ci
    #+END_SRC

    Run the script

    #+BEGIN_SRC sh
      bash /root/bin/initialize_ci_app.sh
    #+END_SRC


*** Nginx

    Create a config file.

    Located: /etc/nginx/sites-available/ci

    #+BEGIN_SRC text  :tangle /ssh:unitime|sudo:unitime:/etc/nginx/sites-available/ci
      server {
          listen       80;
          server_name  ci.unitime.se;
          return 301   https://$server_name$request_uri;
      }

      server {
          listen 443 ssl;

          server_name ci.unitime.se;

          include snippets/ssl-unitime.se.conf;
          include snippets/ssl-params.conf;
          include snippets/well-known.conf;


          # The rest of your server block
          # root /usr/share/nginx/html;
          # index index.html index.htm;
          location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_pass http://unix:/webapps/ci/ci.sock;
          }
      }
    #+END_SRC

    Create symbolic link to =sites-enables=.

    #+BEGIN_SRC sh
      ln -s /etc/nginx/sites-available/ci /etc/nginx/sites-enabled/ci
    #+END_SRC

    Restart *Nginx*

    #+BEGIN_SRC sh
      systemctl restart nginx
    #+END_SRC


*** Systemd
**** Service

     Located: /etc/systemd/system/ci.service

     #+BEGIN_SRC text :tangle /ssh:unitime|sudo:unitime:/etc/systemd/system/ci.service
       [Unit]
       Description=CI daemon
       After=network.target

       [Service]
       User=root
       Group=root
       Restart=on-failure
       RestartSec=5
       WorkingDirectory=/webapps/ci
       ExecStart=/webapps/ci/venv/bin/gunicorn --workers 2 --bind unix:/webapps/ci/ci.sock deploy:application

       [Install]
       WantedBy=multi-user.target
     #+END_SRC

**** Enable and start

     #+BEGIN_SRC sh
       sudo systemctl daemon-reload
       sudo systemctl start ci.service
       sudo systemctl enable ci.service
       sudo systemctl status ci.service
     #+END_SRC
